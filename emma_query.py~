import logging
logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)


from gensim import corpora, models, similarities


dictionary = corpora.Dictionary.load('emma/emma.dict')
lsi = models.LsiModel.load('emma/model/emma.lsi')
corpus_tfidf = corpora.MmCorpus('emma/emma_tfidf.mm')
corpus_lsi = corpora.MmCorpus('emma/emma_lsi.mm')
index = similarities.Similarity.load('emma/emma_lsi.index')




# PREPARE QUERY VEC FOR "very well" IN EMMA
doc = "very well"
vec_bow = dictionary.doc2bow(doc.lower().split())
vec_lsi = lsi[vec_bow] # convert the query to LSI space
#print(vec_lsi)


# QUERY EMMA FOR SENTECES (DOCS) MOST SIMILAR 
# TO THE STRING "very well"
sims = index[vec_lsi] # perform a similarity query against the corpus
sims = sorted(enumerate(sims), key=lambda item: -item[1]) # sort similar documents in descending order according to cos.
print("The ten most similar sentences to " + doc + " in Emma by Jane Austen are: ")
for doc,sim in sims[1:10]:
    print("Cosine Similarity: " + str(sim))
    print("\t\t" + str(corpus_lsi[doc]))
    print("\t\t" + str(corpus_tfidf[doc])) 

#print(sims[1:10]) # print sorted (document number, similarity score) 2-tuples 



